
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package fesa.ico.compi;

import java_cup.runtime.*;
import java.io.FileReader;
import java_cup.runtime.XMLElement;
import javax.swing.JOptionPane;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoSQL extends java_cup.runtime.lr_parser {
    
    int horror =0;

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoSQL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoSQL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoSQL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\027\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\012\005\000\002\012\007" +
    "\000\002\012\011\000\002\004\004\000\002\004\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\006\000\002" +
    "\005\004\000\002\006\003\000\002\006\003\000\002\007" +
    "\003\000\002\007\005\000\002\010\010\000\002\010\006" +
    "\000\002\011\007\000\002\011\005\000\002\011\005\000" +
    "\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\010\004\012\010\006\016\005\001\002\000" +
    "\012\002\uffff\004\uffff\010\uffff\016\uffff\001\002\000\004" +
    "\017\052\001\002\000\004\005\ufff9\001\002\000\004\011" +
    "\051\001\002\000\012\002\050\004\012\010\006\016\005" +
    "\001\002\000\004\005\031\001\002\000\012\007\017\021" +
    "\014\022\016\027\015\001\002\000\004\005\ufff8\001\002" +
    "\000\004\027\015\001\002\000\010\005\ufff2\014\ufff2\015" +
    "\026\001\002\000\004\005\ufff7\001\002\000\004\013\021" +
    "\001\002\000\004\005\ufffa\001\002\000\006\022\023\027" +
    "\022\001\002\000\004\014\ufff4\001\002\000\004\014\ufff3" +
    "\001\002\000\004\014\025\001\002\000\004\005\ufff6\001" +
    "\002\000\004\027\015\001\002\000\006\005\ufff1\014\ufff1" +
    "\001\002\000\004\005\ufff5\001\002\000\004\027\032\001" +
    "\002\000\006\006\033\011\ufffd\001\002\000\004\027\034" +
    "\001\002\000\010\023\036\024\037\025\040\001\002\000" +
    "\004\011\ufffc\001\002\000\006\012\044\026\043\001\002" +
    "\000\004\026\042\001\002\000\004\026\041\001\002\000" +
    "\004\011\uffeb\001\002\000\004\011\uffec\001\002\000\004" +
    "\011\uffed\001\002\000\004\027\045\001\002\000\004\012" +
    "\046\001\002\000\004\011\uffee\001\002\000\012\002\000" +
    "\004\000\010\000\016\000\001\002\000\004\002\001\001" +
    "\002\000\012\002\ufffe\004\ufffe\010\ufffe\016\ufffe\001\002" +
    "\000\004\027\053\001\002\000\004\013\054\001\002\000" +
    "\004\027\015\001\002\000\004\014\056\001\002\000\006" +
    "\004\061\020\057\001\002\000\004\013\067\001\002\000" +
    "\004\011\ufffb\001\002\000\012\007\017\021\014\022\016" +
    "\027\015\001\002\000\004\005\063\001\002\000\004\027" +
    "\064\001\002\000\004\006\065\001\002\000\004\027\034" +
    "\001\002\000\004\011\ufff0\001\002\000\004\027\015\001" +
    "\002\000\004\014\071\001\002\000\004\011\uffef\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\012\002\007\003\003\004\010\012\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\046\004\010\012\006\001" +
    "\001\000\002\001\001\000\006\005\017\007\012\001\001" +
    "\000\002\001\001\000\004\007\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\054\001\001\000\002\001\001\000\004\010\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\061\007" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\065\001\001\000\002\001\001\000" +
    "\004\007\067\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoSQL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoSQL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoSQL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/*Metodos de reconocimiento de errores de sintáxis*/
public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error");
    if (info instanceof java_cup.runtime.Symbol) {
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol)info);
        if (s.left >= 0) {
            m.append(" en la línea "+(s.left+1));
            if (s.right >= 0)
                m.append(", columna "+(s.right+1));
            }
        }
    m.append(" : "+message);
    System.err.println(m);
    this.horror = 1;
    JOptionPane.showMessageDialog(null, m.toString());
}
public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    //System.exit(1);
    this.horror = 2;
}
/*Método Main*/
public static boolean main(String[] args){
    try {
        SintacticoSQL asin = new SintacticoSQL(
        new LexicoSQL(new FileReader(args[0])));
        Object result = asin.parse().value;
        if(asin.horror==0){
            return true;
        }else{
            return false;
        }
    } catch (Exception ex) {
        ex.printStackTrace();
        return false;
    }
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoSQL$actions {
  private final SintacticoSQL parser;

  /** Constructor */
  CUP$SintacticoSQL$actions(SintacticoSQL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoSQL$do_action_part00000000(
    int                        CUP$SintacticoSQL$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoSQL$parser,
    java.util.Stack            CUP$SintacticoSQL$stack,
    int                        CUP$SintacticoSQL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoSQL$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoSQL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.elementAt(CUP$SintacticoSQL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.elementAt(CUP$SintacticoSQL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoSQL$stack.elementAt(CUP$SintacticoSQL$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.elementAt(CUP$SintacticoSQL$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoSQL$parser.done_parsing();
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expr_list ::= expr_list expr_part 
            {
              Object RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.elementAt(CUP$SintacticoSQL$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_part 
            {
              Object RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_part ::= expr PYC 
            {
              Object RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.elementAt(CUP$SintacticoSQL$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= first FROM ID 
            {
              Integer RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.elementAt(CUP$SintacticoSQL$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= first FROM ID WHERE cond 
            {
              Integer RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.elementAt(CUP$SintacticoSQL$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= INSERT INTO ID PA mtid PC corn 
            {
              Integer RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.elementAt(CUP$SintacticoSQL$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // first ::= SELECT val 
            {
              Object RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("first",2, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.elementAt(CUP$SintacticoSQL$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // first ::= DELETE 
            {
              Object RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("first",2, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // val ::= mtid 
            {
              Object RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("val",3, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // val ::= ALL 
            {
              Object RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("val",3, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // val ::= COUNT PA idall PC 
            {
              Object RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("val",3, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.elementAt(CUP$SintacticoSQL$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // val ::= DISTINCT mtid 
            {
              Object RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("val",3, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.elementAt(CUP$SintacticoSQL$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // idall ::= ID 
            {
              Object RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("idall",4, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // idall ::= ALL 
            {
              Object RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("idall",4, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // mtid ::= ID 
            {
              Object RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("mtid",5, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // mtid ::= ID COMA mtid 
            {
              Object RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("mtid",5, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.elementAt(CUP$SintacticoSQL$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // corn ::= SELECT val FROM ID WHERE cond 
            {
              Object RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("corn",6, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.elementAt(CUP$SintacticoSQL$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // corn ::= VALUES PA mtid PC 
            {
              Object RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("corn",6, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.elementAt(CUP$SintacticoSQL$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cond ::= ID IGUAL CS ID CS 
            {
              Object RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.elementAt(CUP$SintacticoSQL$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cond ::= ID IGUAL DIG 
            {
              Object RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.elementAt(CUP$SintacticoSQL$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cond ::= ID MEN DIG 
            {
              Object RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.elementAt(CUP$SintacticoSQL$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cond ::= ID MAY DIG 
            {
              Object RESULT =null;

              CUP$SintacticoSQL$result = parser.getSymbolFactory().newSymbol("cond",7, ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.elementAt(CUP$SintacticoSQL$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoSQL$stack.peek()), RESULT);
            }
          return CUP$SintacticoSQL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoSQL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoSQL$do_action(
    int                        CUP$SintacticoSQL$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoSQL$parser,
    java.util.Stack            CUP$SintacticoSQL$stack,
    int                        CUP$SintacticoSQL$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoSQL$do_action_part00000000(
                               CUP$SintacticoSQL$act_num,
                               CUP$SintacticoSQL$parser,
                               CUP$SintacticoSQL$stack,
                               CUP$SintacticoSQL$top);
    }
}

}
